@using HomeSHS.Components.Helpers
@using SHC.Entities
@using SHC.Entities.Door
@using SHC.Entities.Light
@using SHC.Entities.Window
@using SHC.Enums
@inject IPageRefresher PageRefresher

<body>
    <br />
    <div class="container">
        <h3 for="item">@simulationContext.SelectedRoom.Name</h3>
        <select id="item" multiple>
            <option value="windows" disabled="@(simulationContext.SelectedRoom.Name == "Backyard")" @onclick=@(async () => await SetSelectedGroup("windows"))>Windows</option>
            <option value="lights" @onclick=@(async () => await SetSelectedGroup("lights"))>Lights</option>
            <option value="doors" disabled="@(simulationContext.SelectedRoom.Name == "Backyard")" @onclick=@(async () => await SetSelectedGroup("doors"))>Doors</option>
        </select>
        @if (simulationContext.SelectedGroup == "windows" && simulationContext.SelectedRoom.Name != "Backyard")
        {
            <h4>Is Open?</h4>
            <div class="checkbox-group">
                @foreach(var window in selectedRoomWindows)
                {
                    <label><input type="checkbox" checked="@window.isOpen" disabled="@(areWindowsDisabled || window.isBlocked)" @onclick=@(() => ToggleSettingWindow(window)) name="location" value="@window.Name"> @(window.isBlocked ? window.Name + " (Blocked)" : window.Name) </label>
                }
            </div>
        }
        @if (simulationContext.SelectedGroup == "lights")
        {
            <h4>Is On?</h4>
            <div class="checkbox-group">
                @foreach (var light in selectedRoomLights)
                {
                    <label><input type="checkbox" checked="@light.isOn" disabled="@(areLightsDisabled || light.autoMode)" @onclick=@(() => ToggleSettingLight(light)) name="location" value="@light.Name"> @light.Name</label>
                    <label><input type="checkbox" checked="@light.autoMode" disabled="@areLightsDisabled" @onclick=@(() => ToggleAutoModeLight(light)) value="@light.Name"> AutoMode?</label>

                }
            </div>
        }
        @if (simulationContext.SelectedGroup == "doors" && simulationContext.SelectedRoom.Name != "Backyard")
        {
            <h4>Is Locked?</h4>
            <div class="checkbox-group">
                @foreach (var door in selectedRoomDoors)
                {
                    <label><input type="checkbox" checked="@door.IsLocked" disabled="@areDoorsDisabled" @onclick=@(() => ToggleSettingDoor(door)) name="location" value="@door.Name"> @door.Name</label>
                }
            </div>
        }
    </div>
</body>


@code {
    SimulationContext simulationContext = SimulationContext.GetInstance();
    OutputConsole outputConsole = OutputConsole.GetInstance();
    List<SmartWindow> selectedRoomWindows = new List<SmartWindow>();
    List<SmartDoor> selectedRoomDoors = new List<SmartDoor>();
    List<SmartLight> selectedRoomLights = new List<SmartLight>();
    VirtualUser? currentUser;
    bool areWindowsDisabled = true;
    bool areDoorsDisabled = true;
    bool areLightsDisabled = true;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PageRefresher.SHCTabRefreshRequested += RefreshSHCTab;

        //simulationContext.SelectedRoom = simulationContext.RenderRooms.FirstOrDefault().Item1;
        currentUser = simulationContext.CurrentUser;
        await SetSelectedRoomWindows();
        await SetSelectedRoomDoors();
        await SetSelectedRoomLights();
        await SetAllPermissions();
    }

    private async Task SetSelectedGroup(string group)
    {
        simulationContext.SelectedGroup = group;
        PageRefresher.CallSHCTabRefreshRequested();
    }

    private void RefreshSHCTab()
    {
        StateHasChanged();
        OnInitializedAsync();
    }

    private async Task SetSelectedRoomWindows()
    {
        selectedRoomWindows = new List<SmartWindow>();
        if (simulationContext.SelectedRoom.LeftWall.Window != null)
            selectedRoomWindows.Add((SmartWindow)simulationContext.SelectedRoom.LeftWall.Window);
        if (simulationContext.SelectedRoom.RightWall.Window != null)
            selectedRoomWindows.Add((SmartWindow)simulationContext.SelectedRoom.RightWall.Window);
        if (simulationContext.SelectedRoom.TopWall.Window != null)
            selectedRoomWindows.Add((SmartWindow)simulationContext.SelectedRoom.TopWall.Window);
        if (simulationContext.SelectedRoom.BottomWall.Window != null)
            selectedRoomWindows.Add((SmartWindow)simulationContext.SelectedRoom.BottomWall.Window);
    }

    private async Task SetSelectedRoomDoors()
    {
        selectedRoomDoors = new List<SmartDoor>();
        if (simulationContext.SelectedRoom.LeftWall.Door != null)
            selectedRoomDoors.Add((SmartDoor)simulationContext.SelectedRoom.LeftWall.Door);
        if (simulationContext.SelectedRoom.RightWall.Door != null)
            selectedRoomDoors.Add((SmartDoor)simulationContext.SelectedRoom.RightWall.Door);
        if (simulationContext.SelectedRoom.TopWall.Door != null)
            selectedRoomDoors.Add((SmartDoor)simulationContext.SelectedRoom.TopWall.Door);
        if (simulationContext.SelectedRoom.BottomWall.Door != null)
            selectedRoomDoors.Add((SmartDoor)simulationContext.SelectedRoom.BottomWall.Door);
    }

    private async Task SetSelectedRoomLights()
    {
        selectedRoomLights = new List<SmartLight>();
        if (simulationContext.SelectedRoom.Lights != null)
            foreach (var light in simulationContext.SelectedRoom.Lights)
                selectedRoomLights.Add((SmartLight)light);
    }

    private async Task ToggleSettingWindow(SmartWindow window)
    {
        window.isOpen = !window.isOpen;
        OnInitializedAsync();
        outputConsole.Log(
            deviceId: $"{window.ToString()}",
            eventType: $"ToggleWindow",
            eventDesc: $"{(window.isOpen ? "Opened window" : "Closed window")}",
            details: $""
        );

        outputConsole.writeToFile(window.ToString(), "ToggleWindow", $"{(window.isOpen ? "Opened window" : "Closed window")}", " ");
        PageRefresher.CallOutputConsoleRefresh();
    }

    private async Task ToggleSettingDoor(SmartDoor door)
    {
        door.IsLocked = !door.IsLocked;
        OnInitializedAsync();
        outputConsole.Log(
            deviceId: $"{door.ToString()}",
            eventType: $"ToggleDoor",
            eventDesc: $"{(door.IsLocked ? "Unlocked door" : "Locked door")}",
            details: $""
        );
        outputConsole.writeToFile(door.ToString(), "ToggleDoor", $"{(door.IsLocked ? "Unlocked door" : "Locked door")}", " ");
        PageRefresher.CallOutputConsoleRefresh();
    }

    private async Task ToggleSettingLight(SmartLight light)
    {
        light.isOn = !light.isOn;
        OnInitializedAsync();
        outputConsole.Log(
            deviceId: $"{light.ToString()}",
            eventType: $"ToggleLight",
            eventDesc: $"{(light.isOn ? "Turned on light" : "Turned off light")}",
            details: $""
        );
        outputConsole.writeToFile(light.ToString(), "ToggleLight", $"{(light.isOn ? "Turned on Light" : "Turned off light")}", " ");
        PageRefresher.CallOutputConsoleRefresh();
    }

    private async Task ToggleAutoModeLight(SmartLight light)
    {
        light.autoMode= !light.autoMode;
        outputConsole.Log(
            deviceId: $"{light.ToString()}",
            eventType: $"ToggleAutoModeLight",
            eventDesc: $"{(light.autoMode ? "Turned on automode" : "Turned off automode")}",
            details: $""
        );
        outputConsole.writeToFile(light.ToString(), "ToggleAutoModeLight", $"{(light.autoMode ? "Turned on automode" : "Turned off automode")}", " ");


    }


    private async Task SetAllPermissions()
    {
        switch (currentUser.UserType)
        {
            case UserType.Parent:
                areWindowsDisabled = false;
                areDoorsDisabled = false;
                areLightsDisabled = false;
                break;
            case UserType.Child:
            case UserType.Guest:
                if (currentUser.CurrentLocation?.Id == simulationContext.SelectedRoom.Id)
                {
                    areWindowsDisabled = false;
                    areLightsDisabled = false;
                }
                break;
            case UserType.Stranger:
                break;
        }
    }
}

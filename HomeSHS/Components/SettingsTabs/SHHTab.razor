@using HomeSHS.Components.Helpers
@using SHC.Entities
@using SHC.Entities.Room
@inject IPageRefresher PageRefresher

<body>
    <br/>
    <div class="container">
        <div class="form-section">
            <h3 for="item">@simulationContext.SelectedRoom.Name</h3>
            <p>Room temp: @simulationContext.SelectedRoom.Temperature C</p>
            <Button class="button-date-time" Color="Color.Primary" onclick="@(() => {ShowModal();})">Edit zones</Button>
        </div>
    </div>
</body>

<Modal @ref="EditZonesModal" Closing="OnClosing">
    <ModalContent Centered Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Edit zones</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Table>
                <TableHeader>
                    <TableHeaderCell>Zone #</TableHeaderCell>
                    @foreach (var room in simulationContext.RenderRooms)
                    {
                        <TableHeaderCell>@room.Item1.Name</TableHeaderCell>
                    }
                    <TableHeaderCell>Morning Temp</TableHeaderCell>
                    <TableHeaderCell>Afternoone Temp</TableHeaderCell>
                    <TableHeaderCell>Night Temp</TableHeaderCell>
                </TableHeader>
                <TableBody>
                    @foreach (var zone in zones)
                    {
                        <TableRowCell>@zone.zoneNum</TableRowCell>
                        @foreach (var room in simulationContext.RenderRooms)
                        {
                            <TableRowCell>
                                <Radio Group="@("room-" + room.Item1.Id)" TValue="bool" Checked="@zone.rooms.Contains(room.Item1)" />
                            </TableRowCell>
                        }
                        <TableRowCell>
                            <NumericEdit TValue="double" Value="zone.temp1"></NumericEdit>
                        </TableRowCell>
                        <TableRowCell>
                            <NumericEdit TValue="double" Value="zone.temp2"></NumericEdit>
                        </TableRowCell>
                        <TableRowCell>
                            <NumericEdit TValue="double" Value="zone.temp3"></NumericEdit>
                        </TableRowCell>
                    }
                </TableBody>
            </Table>
            <div>
                <Button Color="Color.Primary">Add zone</Button>
            </div>
            <div>
                <Dropdown>
                    <DropdownToggle Color="Color.Primary">@zones.First().zoneNum</DropdownToggle>
                    <DropdownMenu MaxMenuHeight="200px">
                        @foreach (var zone in zones)
                        {
                            <DropdownItem Clicked="@(() => {})">@zone.zoneNum</DropdownItem>
                        }
                    </DropdownMenu>
                    <Button Color="Color.Danger" onclick="@(() => {})">Delete zone</Button>
                </Dropdown>
            </div>          
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Dark" onclick="@(() => {HideModal();})">Close</Button>
            <Button Color="Color.Success" onclick="@(() => {})">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    SimulationContext simulationContext = SimulationContext.GetInstance();
    VirtualUser? currentUser;
    (IRoom, (double x, double y)) selectedRoom;
    double outsideTemperature;
    List<(int zoneNum, List<IRoom> rooms, double temp1, double temp2, double temp3)> zones;
    private Modal EditZonesModal;


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        PageRefresher.SHHTabRefreshRequested += RefreshSHHTab;

        currentUser = simulationContext.CurrentUser;
        selectedRoom = simulationContext.RenderRooms.FirstOrDefault();
        outsideTemperature = simulationContext.OutsideTemperature;
        zones = ((SmartHomeHeating)simulationContext.SHHListener.observers.FirstOrDefault()).ZoneManagement;
    }

    private void RefreshSHHTab()
    {
        StateHasChanged();
        OnInitializedAsync();
    }

    private void ShowModal()
    {
        EditZonesModal.Show();
    }

    private void HideModal()
    {
        EditZonesModal.Hide();
    }

    private async Task OnClosing(ModalClosingEventArgs e)
    {
        PageRefresher.CallSHHTabRefreshRequested();
    }
}

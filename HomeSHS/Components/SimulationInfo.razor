@using HomeSHS.Components.Helpers
@using SHC.Entities
@using SHC.Enums
@using System.Timers;
@using SHC.Utilities.Observer;
@implements IDisposable
@inject IPageRefresher PageRefresher

<h3>Simulation</h3>
<Button Clicked="@(() => ToggleOnSwitch())"
        Color="@(isOn ? Color.Success : Color.Danger)">
        @(isOn ? "ON" : "OFF")
</Button>
<br />
<br />
@if (currentUser.UserType > UserType.Child)
{
    <h4>Welcome</h4>
}
else
{
    <h4>Welcome, @currentUser.FirstName</h4>
}
<p><b>Account Type:</b> @currentUser.UserType</p>
<p><b>Location:</b> @(currentUser.CurrentLocation == null ? "Outside" : currentUser.CurrentLocation.Name)</p>
<br />
<br />
<br />
<p>
    <h4>@currentTime.ToString("D")</h4>
    <h4>@currentTime.ToString("T")</h4>
</p>
<p><b>Simulation Speed:</b> @(timeSpeed.ToString() + "x")</p>
<Slider @bind-Value="@timeSpeed" Step="1" Min="1" Max="10"/>
<br />
<br />
<p><b>Outside Temperature:</b> @simulationContext.OutsideTemperature °C</p>
<br />


<div class="form-section">
    @if (!(simulationContext.UserMessage == ""))
    {
        <h4 style="color:red">ALERT</h4>
        <p style="color:red">@simulationContext.UserMessage</p>
        <Button Clicked="@(() => {simulationContext.UserMessage = "";})" style="width:98px">Clear alert</Button>  

        <br />
    }

    <h4>Permissions</h4>
    <ul>
        @if (currentUser.UserType == UserType.Parent)
        {
            <li>Open/close windows from anywhere</li>
            <li>Lock/unlock doors from anywhere</li>
            <li>On/off lights from anywhere</li>
            <li>Full operation of SHH from home or remotely</li>
        }
        @if (currentUser.UserType == UserType.Child)
        {
            <li>Open/close windows in current room only</li>
            <li>On/off lights in current room only</li>
            <li>Increase/decreate room temperature in current room only</li>
        }
        @if (currentUser.UserType == UserType.Guest)
        {
            <li>Open/close windows in current room only</li>
            <li>On/off lights in current room only</li>
            <li>Increase/decreate room temperature in current room only</li>
        }
        @if (currentUser.UserType == UserType.Stranger)
        {
            <li>No permissions granted, the application is read-only</li>
        }
    </ul>
</div>

@code {
    SimulationContext simulationContext = SimulationContext.GetInstance();
    bool isOn = false;
    bool toggledOnce = false;
    int timeSpeed = 1;
    int timerInterval = 1000;
    VirtualUser currentUser;
    DateTime currentTime = DateTime.Now;
    DateTime? selectedDateTime;
    Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        PageRefresher.SimulationInfoRefreshRequested += RefreshSimulationInfo;

        isOn = simulationContext.IsOn;
        currentUser = simulationContext.CurrentUser;
        timer = new Timer(timerInterval);
        timer.Enabled = true;
        timer.AutoReset = true;
        timer.Elapsed += (sender, e) => UpdateTime();
    }

    public void RefreshSimulationInfo()
    {
        currentUser = simulationContext.CurrentUser;
        StateHasChanged();
    }

    protected async void UpdateTime()
    {
        if (isOn)
        {
            if (currentTime != simulationContext.CurrentDateTime && toggledOnce)
                currentTime = simulationContext.CurrentDateTime;
            if (timer.Interval != (1000 / timeSpeed))
                timer.Interval = 1000 / timeSpeed;

            currentTime = currentTime.AddSeconds(1);

            if (simulationContext.UploadedOutsideTemperatures.Any(x => x.date == currentTime))
            {
                var temp = simulationContext.UploadedOutsideTemperatures.Find(x => x.date == currentTime).temperature;
                simulationContext.OutsideTemperature = temp;
            }

            TimeSpan morning = new TimeSpan(5, 0, 0);
            TimeSpan afternoon = new TimeSpan(13, 0, 0);
            TimeSpan night = new TimeSpan(21, 0, 0);

            var timeOfDay = "";

            if (currentTime.TimeOfDay >= morning && currentTime.TimeOfDay < afternoon)
                timeOfDay = "time1";
            else if (currentTime.TimeOfDay >= afternoon && currentTime.TimeOfDay < night)
                timeOfDay = "time2";
            else
                timeOfDay = "time3";

            if (simulationContext.SHHListener.isOn)
                await ((SmartHomeHeating)simulationContext.SHHListener.observers.First()).UpdateRoomTemperaturesHAVCOn(timeOfDay);
            else
                await ((SmartHomeHeating)simulationContext.SHHListener.observers.First()).UpdateRoomTemperaturesHAVCOff();

            var motionDetected = simulationContext.SHPContext.CheckForPresenceInRooms();

            if (motionDetected != -1)
            {
                var ticksUntilPoliceCalled = simulationContext.SHPContext.GetTimerTicks();
                if (ticksUntilPoliceCalled > 0)
                    simulationContext.SHPContext.SetTimerTicks(ticksUntilPoliceCalled - 1);
                else
                    simulationContext.UserMessage = "Police have been called in response to motion detected in home.";

            }

            PageRefresher.CallSelectedRoomSHHInfoRefresh();
            PageRefresher.CallSelectedRoomSHPInfoRefresh();
            PageRefresher.CallHomeRenderRefresh();

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
            simulationContext.CurrentDateTime = currentTime;

            if (!toggledOnce)
                toggledOnce = true;
        }
    }

    Task ToggleOnSwitch()
    {
        isOn = !isOn;
        simulationContext.IsOn = isOn;

        PageRefresher.CallSHHTabRefreshRequested();

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}

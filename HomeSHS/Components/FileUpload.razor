@page "/FileUpload"

@using System.IO
@using SHC.Models
@using Microsoft.AspNetCore.Components.Forms
@using SHC.Models.Builder;
@using SHC.Entities;



<form class="file-upload-form">
    <label for="fileInput" class="file-upload-label">
        <div class="file-upload-design">
            <svg viewBox="0 0 640 512" height="1em">
                <path d="M144 480C64.5 480 0 415.5 0 336c0-62.8 40.2-116.2 96.2-135.9c-.1-2.7-.2-5.4-.2-8.1c0-88.4 71.6-160 160-160c59.3 0 111 32.2 138.7 80.2C409.9 102 428.3 96 448 96c53 0 96 43 96 96c0 12.2-2.3 23.8-6.4 34.6C596 238.4 640 290.1 640 352c0 70.7-57.3 128-128 128H144zm79-217c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l39-39V392c0 13.3 10.7 24 24 24s24-10.7 24-24V257.9l39 39c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-80-80c-9.4-9.4-24.6-9.4-33.9 0l-80 80z"></path>
            </svg>
            <p>Drag and Drop</p>
            <p>or</p>
            <span class="browse-button">Browse file</span>
        </div>
    </label>
    <InputFile id="fileInput" OnChange="@HandleFileChange" accept=".txt" style="display:none" />
    <Button class="submit-button" Color="Color.Primary" @onclick="Submit">Submit</Button>
</form>


@code {
    FileHomeReader fileHomeReader;
    MemoryStream fileContent;
    private bool fileSelected = false;
    Director director;

    static House house;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File; // Get the first file, if multiple files were selected, they are accessible via e.GetMultipleFiles()
        if (file != null)
        {
            fileContent?.Dispose(); // Dispose previous MemoryStream if it exists
            fileContent = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(fileContent);
            fileSelected = true; // Mark as file selected
        }
    }

    void Submit()
    {
        HomeBuilder homeBuilder = new HomeBuilder();
        Console.WriteLine("Start Submitting");
        if (fileSelected && fileContent != null)
        {
            try
            {
                fileHomeReader = new FileHomeReader();
                fileContent.Position = 0; // Reset the position to read from the 
                fileHomeReader.readFile(fileContent); // Ensure ReadFile accepts a Stream parameter
                director = new Director(fileHomeReader, homeBuilder);

                Console.WriteLine("File uploaded successfully");

            }
            finally
            {
                fileContent.Dispose(); // Dispose the stream properly
                fileContent = null; // Ensure the reference is cleared
                fileSelected = false; // Reset file selection state
            }
        }
        Console.WriteLine("");
        director.constructHouse();
        house = homeBuilder.getProduct();





    }
}

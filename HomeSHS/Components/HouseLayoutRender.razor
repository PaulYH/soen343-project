@using HomeSHS.Components.Helpers
@using SHC.Entities
@using SHC.Entities.Door
@using SHC.Entities.Light
@using SHC.Entities.Room
@using SHC.Entities.Window
@inject IJSRuntime JsRuntime
@inject IPageRefresher PageRefresher

<body>
    <div class="container">
        <svg id="render-container"
             width="1000"
             height="1000"
             viewBox="0 0 1000 1000">
            @foreach (var r in renderRooms)
            {
                <g>
                    <rect id="@(r.Item1.Name + "-" + r.Item1.Id)"
                          height="100"
                          width="100"
                          style="fill:white; stroke:black; stroke-width:2px"
                          x="@r.Item2.x"
                          y="@r.Item2.y"
                          @onclick=@(() => SetSelectedRoom(r.Item1))></rect>
                    <text id="@(r.Item1.Name + "-" + r.Item1.Id + "-text")"
                          class="@(simulationContext.SelectedRoom.Id == r.Item1.Id ? "text-selected" : "text-regular")"
                          x="@(r.Item2.x + 8)"
                          y="@(r.Item2.y + 45)"
                          @onclick=@(() => SetSelectedRoom(r.Item1))>
                        @r.Item1.Name
                    </text>
                    <text id="@(r.Item1.Name + "-" + r.Item1.Id + "-temp")"
                          class="text-temp"
                          x="@(r.Item2.x + 8)"
                          y="@(r.Item2.y + 60)"
                          @onclick=@(() => SetSelectedRoom(r.Item1))>
                        @(String.Format("{0:0.0}", r.Item1.Temperature)) °C
                    </text>
                </g>
            }
        </svg>
    </div>
</body>


@code {
    SimulationContext simulationContext = SimulationContext.GetInstance();
    int rect1x = 0;
    int rect1y = 0;
    int rect2x = 100;
    int rect2y = 0;
    string showx = string.Empty;
    string showy = string.Empty;

    HouseAssembler houseAssembler = new HouseAssembler(); 
    House house;
    Entrance houseEntrance;
    List<(IRoom, (double x, double y))> renderRooms = new List<(IRoom, (double x, double y))>();

    protected override async Task OnInitializedAsync()
    {
        if (!simulationContext.hasRenderLoaded)
        {
            simulationContext.RenderRooms = await houseAssembler.BuildLayoutStructure();
            renderRooms = simulationContext.RenderRooms;
            simulationContext.SelectedRoom = renderRooms.FirstOrDefault().Item1;
            simulationContext.hasRenderLoaded = true;
        }
        renderRooms = simulationContext.RenderRooms;
        PageRefresher.HomeRenderRefreshRequested += RefreshRender;
    }

    public void SetSelectedRoom(IRoom selectedRoom)
    {
        simulationContext.SelectedRoom = selectedRoom;
        PageRefresher.CallSHCTabRefreshRequested();
        PageRefresher.CallSHHTabRefreshRequested();
        PageRefresher.CallSelectedRoomSHHInfoRefresh();
    }

    private void RefreshRender()
    {
        InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }
    
}

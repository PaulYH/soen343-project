@using HomeSHS.Components.Helpers
@using SHC.Entities
@using SHC.Entities.Door
@using SHC.Entities.Light
@using SHC.Entities.Room
@using SHC.Entities.Window
@inject IJSRuntime JsRuntime
@inject IPageRefresher PageRefresher

<body>
    <div class="container">
        <svg id="render-container"
             width="1000"
             height="1000"
             viewBox="0 0 850 850">
            @foreach (var r in renderRooms)
            {
                <g>
                    <rect id="@(r.Item1.Name + "-" + r.Item1.Id)"
                          height="100"
                          width="100"
                          style="fill:white; stroke:black; stroke-width:2px"
                          x="@r.Item2.x"
                          y="@r.Item2.y"
                          @onclick=@(() => SetSelectedRoom(r.Item1))></rect>
                    <text id="@(r.Item1.Name + "-" + r.Item1.Id + "-text")"
                          class="@(simulationContext.SelectedRoom.Id == r.Item1.Id ? "text-selected" : "text-regular")"
                          x="@(r.Item2.x + 8)"
                          y="@(r.Item2.y + 35)"
                          @onclick=@(() => SetSelectedRoom(r.Item1))>
                        @r.Item1.Name
                    </text>
                  
                    @if (AreLightsOn(r.Item1))
                    {
                        <g>
                            <foreignObject x="@(r.Item2.x + 25)" y="@(r.Item2.y + 73)" width="20" height="20">
                                <div xmlns="http://www.w3.org/1999/xhtml" style="font-size: 10px; color: #FDDA0D;">
                                    <i class="fas fa-lightbulb"></i>
                                </div>
                            </foreignObject>
                            <text id="@(r.Item1.Name + "-" + r.Item1.Id + "-lights-qty")"
                                  x="@(r.Item2.x + 26)"
                                  y="@(r.Item2.y + 95)"
                                  font-size="8px">
                                @enabledLights
                            </text>
                         </g>
                    }
                    else
                    {
                        <foreignObject x="@(r.Item2.x + 25)" y="@(r.Item2.y + 73)" width="20" height="20">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size: 10px;">
                                <i class="fas fa-lightbulb"></i>
                            </div>
                        </foreignObject>
                    }

                    @if (r.Item1.Name != "Backyard")
                    {
                        @if (AreWindowsOpen(r.Item1))
                        {
                            <g>
                                <image href="/asset/window-open.svg"
                                       x="@(r.Item2.x + 5)" y="@(r.Item2.y + 73)"
                                       width="15" height="15" />
                                <text id="@(r.Item1.Name + "-" + r.Item1.Id + "-windows-qty")"
                                      x="@(r.Item2.x + 10)"
                                      y="@(r.Item2.y + 95)"
                                      font-size="8px">
                                    @enabledWindows
                                </text>
                            </g>
                        }
                        else
                        {
                            <image href="/asset/window-closed.svg"
                                   x="@(r.Item2.x + 5)" y="@(r.Item2.y + 73)"
                                   width="15" height="15" />
                        }
                    }

                    @if (r.Item1.Name != "Backyard")
                    {
                        @if (AreDoorsLocked(r.Item1))
                        {
                            <g>
                                <image href="/asset/door-open.svg"
                                       x="@(r.Item2.x + 37)" y="@(r.Item2.y + 73)"
                                       width="15" height="15" />
                                <text id="@(r.Item1.Name + "-" + r.Item1.Id + "-doors-qty")"
                                      x="@(r.Item2.x + 42)"
                                      y="@(r.Item2.y + 95)"
                                      font-size="8px">
                                    @enabledDoors
                                </text>
                            </g>
                        }
                        else
                        {
                            <image href="/asset/door-closed.svg"
                                   x="@(r.Item2.x + 37)" y="@(r.Item2.y + 73)"
                                   width="15" height="15" />
                        }
                    }
                    

                    @if (r.Item1.TempStatus == "heating" && r.Item1.Name != "Backyard")
                    {
                        <foreignObject x="@(r.Item2.x + 57)" y="@(r.Item2.y + 73)" width="20" height="20">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size: 10px; color: red;">
                                <i class="fas fa-fire"></i>
                            </div>
                        </foreignObject>
                    }
                    @if (r.Item1.TempStatus == "cooling" && r.Item1.Name != "Backyard")
                    {
                        <foreignObject x="@(r.Item2.x + 57)" y="@(r.Item2.y + 73)" width="20" height="20">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size: 10px; color: blue;">
                                <i class="fas fa-snowflake"></i>
                            </div>
                        </foreignObject>
                    }

                    <text id="@(r.Item1.Name + "-" + r.Item1.Id + "-temp")"
                          class="text-temp"
                          x="@(r.Item2.x + 8)"
                          y="@(r.Item2.y + 50)"
                          @onclick=@(() => SetSelectedRoom(r.Item1))>
                        @(String.Format("{0:0.0}", r.Item1.Temperature)) °C
                    </text>
                </g>
            }
        </svg>
    </div>
</body>


@code {
    SimulationContext simulationContext = SimulationContext.GetInstance();
    int rect1x = 0;
    int rect1y = 0;
    int rect2x = 100;
    int rect2y = 0;
    string showx = string.Empty;
    string showy = string.Empty;

    int enabledDoors = 0;
    int enabledWindows = 0;
    int enabledLights = 0;


    HouseAssembler houseAssembler = new HouseAssembler(); 
    House house;
    Entrance houseEntrance;
    List<(IRoom, (double x, double y))> renderRooms = new List<(IRoom, (double x, double y))>();

    protected override async Task OnInitializedAsync()
    {
        if (!simulationContext.hasRenderLoaded)
        {
            simulationContext.RenderRooms = await houseAssembler.BuildLayoutStructure();
            renderRooms = simulationContext.RenderRooms;
            simulationContext.SelectedRoom = renderRooms.FirstOrDefault().Item1;
            simulationContext.hasRenderLoaded = true;
        }
        renderRooms = simulationContext.RenderRooms;
        PageRefresher.HomeRenderRefreshRequested += RefreshRender;
    }

    public void SetSelectedRoom(IRoom selectedRoom)
    {
        simulationContext.SelectedRoom = selectedRoom;
        PageRefresher.CallSHCTabRefreshRequested();
        PageRefresher.CallSHHTabRefreshRequested();
        PageRefresher.CallSelectedRoomSHHInfoRefresh();
    }

    private bool AreLightsOn(IRoom room)
    {
        enabledLights = 0;
        foreach (SmartLight light in room.Lights)
        {
            if (light.isOn)
                enabledLights++;
        }

        if (enabledLights > 0)
            return true;

        return false;
    }

    private bool AreWindowsOpen(IRoom room)
    {
        enabledWindows = 0;
        SmartWindow window = (SmartWindow)room.BottomWall.Window;

        if (window != null)
        {

            if (window.isOpen)
            {
                enabledWindows++;
            }

        }

        window = (SmartWindow)room.LeftWall.Window;

        if (window != null)
        {

            if (window.isOpen)
            {
                enabledWindows++;
            }

        }

        window = (SmartWindow)room.RightWall.Window;

        if (window != null)
        {

            if (window.isOpen)
            {
                enabledWindows++;
            }

        }

        window = (SmartWindow)room.TopWall.Window;

        if (window != null)
        {

            if (window.isOpen)
            {
                enabledWindows++;
            }

        }

        if (enabledWindows > 0)
            return true;

        return false;

    }

    private bool AreDoorsLocked(IRoom room)
    {
        enabledDoors = 0;
        SmartDoor door = (SmartDoor)room.BottomWall.Door;

        if (door != null)
        {

            if (door.IsLocked)
            {
                enabledDoors++;
            }

        }

        door = (SmartDoor)room.LeftWall.Door;

        if (door != null)
        {

            if (door.IsLocked)
            {
                enabledDoors++;
            }

        }

        door = (SmartDoor)room.RightWall.Door;

        if (door != null)
        {

            if (door.IsLocked)
            {
                enabledDoors++;
            }

        }

        door = (SmartDoor)room.TopWall.Door;

        if (door != null)
        {

            if (door.IsLocked)
            {
                enabledDoors++;
            }

        }

        if (enabledDoors > 0)
            return true;

        return false;
      }

    private void RefreshRender()
    {
        InvokeAsync(() =>
            {
                StateHasChanged();
            });
    }
    

}

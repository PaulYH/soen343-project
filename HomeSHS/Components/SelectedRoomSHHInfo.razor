@using HomeSHS.Components.Helpers
@using SHC.Entities
@using SHC.Enums
@inject IPageRefresher PageRefresher

<h3 for="item">@simulationContext.SelectedRoom.Name</h3>
<p>Room temp: @(String.Format("{0:0.0}", @simulationContext.SelectedRoom.Temperature)) °C</p>
<p>Zone: @simulationContext.SelectedRoom.ZoneNum</p>
<Check TValue="bool" Disabled="isOverrideDisabled" Checked="isOverriden" CheckedChanged="@(() => {OnCheckedChanged();})">Override zone temperature</Check>
@if (isOverriden && simulationContext.SelectedRoom.Name != "Backyard")
{
    <br/>
    <p>Set room temperature:</p>
    <NumericEdit TValue="double" Disabled="isOverrideDisabled" Value="desiredTemp" ValueChanged="@(x => desiredTemp = x)"></NumericEdit>
    <Button Color="Color.Primary" Disabled="isOverrideDisabled" Clicked="@(() => SetTemp())">Set temperature</Button>
}
@code {
    SimulationContext simulationContext = SimulationContext.GetInstance();
    VirtualUser currentUser;
    bool isOverriden;
    bool isOverrideDisabled = true;
    double previousTemp = 0;
    double desiredTemp;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        currentUser = simulationContext.CurrentUser;
        isOverriden = simulationContext.SelectedRoom.IsZoneOverriden;
        desiredTemp = simulationContext.SelectedRoom.OverrideTemp;
        SetAllPermissions();
        PageRefresher.SelectedRoomSHHInfoRefreshRequested += RefreshSelectedRoomSHHInfo;
    }

    private void RefreshSelectedRoomSHHInfo()
    {
        InvokeAsync(async () =>
            {
                StateHasChanged();
                currentUser = simulationContext.CurrentUser;
                isOverriden = simulationContext.SelectedRoom.IsZoneOverriden;
                if (previousTemp != simulationContext.SelectedRoom.OverrideTemp)
                {
                    previousTemp = simulationContext.SelectedRoom.OverrideTemp;
                    desiredTemp = simulationContext.SelectedRoom.OverrideTemp;
                }
                SetAllPermissions();
            });
    }

    private void OnCheckedChanged()
    {
        isOverriden = !isOverriden;
        simulationContext.SelectedRoom.IsZoneOverriden = isOverriden;
    }

    private void SetTemp()
    {
        simulationContext.SelectedRoom.OverrideTemp = desiredTemp;
        RefreshSelectedRoomSHHInfo();
    }

    private async Task SetAllPermissions()
    {
        switch (currentUser.UserType)
        {
            case UserType.Parent:
                isOverrideDisabled = false;
                break;
            case UserType.Child:
            case UserType.Guest:
                if (currentUser.CurrentLocation?.Id == simulationContext.SelectedRoom.Id)
                {
                    isOverrideDisabled = false;
                }
                break;
            case UserType.Stranger:
                break;
        }
    }
}
